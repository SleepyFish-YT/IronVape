#ifndef CHEATS_H
#define CHEATS_H
#define Author SleepyFish
#include <CTRPluginFramework.hpp>
#include "MenuPointers.hpp"
#include "TextFileParser.hpp"
#include "Unicode.h"

namespace CTRPluginFramework {
#define settingstxt "Settings.txt"
void InitMenu(PluginMenu *menu);
const int *GetSettings();
bool WrapFWK();
static FwkSettings &settings = FwkSettings::Get();
void nameChanger(MenuEntry *entry);
void InfinteAmmo(MenuEntry *entry);
void AimBot(MenuEntry *entry);
void Crash(MenuEntry *entry);
void NoPositionUpdates(MenuEntry *entry);
void Settings(MenuEntry *entry);
void exitgame(MenuEntry *entry);
void MapFreelook(MenuEntry *entry);
void Playersize(MenuEntry *entry);
void heartRate(MenuEntry* entry);
void Invincibility(MenuEntry* entry);
void selfDestruct(MenuEntry* entry);
void YouDie1(MenuEntry* entry);
void MoonJump(MenuEntry* entry);
void detachCamera(MenuEntry* entry);
void FOVMod(MenuEntry *entry);
void FreezeTime(MenuEntry *entry);
void AutoSprint(MenuEntry *entry);
void CrashPLGs(MenuEntry *entry);
void HighScore(MenuEntry *entry);
void HighScore0(MenuEntry *entry);
void RestartOfflineGame(MenuEntry *entry);
void StandOnSmall(MenuEntry *entry);
void CrouchOnWall(MenuEntry *entry);
void SpeedAnima(MenuEntry *entry);
void WinCam(MenuEntry *entry);
void Reload(MenuEntry *entry);
void YandXInvert(MenuEntry *entry);
void SleepySettings(MenuEntry *entry);
void PerfectSound(MenuEntry *entry);
void Methode(MenuEntry *entry);
void ForceOnlineMatchToEnd(MenuEntry *entry);
void noWalkAnim(MenuEntry *entry);
void noAimAnim(MenuEntry *entry);
void kills100(MenuEntry *entry);
void kills0(MenuEntry *entry);
void Rickroll(MenuEntry *entry);
void delAcc(MenuEntry *entry);
void ac(MenuEntry *entry);
void fastinput(MenuEntry *entry);
void toglescreen(MenuEntry *entry);
void fps40(MenuEntry *entry);
void disShoot(MenuEntry *entry);
void fixBig(MenuEntry *entry);
void fixSma(MenuEntry *entry);
void disDeathScreen(MenuEntry *entry);
void blurCam(MenuEntry* entry);
void jumpToOnline(MenuEntry* entry);
void jumpToMainMenu(MenuEntry *entry);
void jumpToOnJukebox(MenuEntry *entry);
void jumpToQuest(MenuEntry *entry);
void jumpToCStick(MenuEntry* entry);
void jumpToAcc(MenuEntry* entry);
void jumpToGameMode(MenuEntry* entry);
void jumpToMultiplayer(MenuEntry* entry);
void jumpToSurvive(MenuEntry* entry);
void jumpToSett(MenuEntry* entry);
void jumpToFastOn(MenuEntry* entry);
void jumpToOnMatch(MenuEntry* entry);
void zoom(MenuEntry *entry);
void OnlineWait(MenuEntry *entry);
void Rapid(MenuEntry *entry);
void author(MenuEntry* entry);
void showGameVer(MenuEntry* entry);
void uninject(MenuEntry* entry);
void showPlgVer(MenuEntry *entry);
void showPlgVerText(MenuEntry *entry);
void showPath(MenuEntry *entry);
void dumpSave(MenuEntry *entry);
void restoreSave(MenuEntry *entry);
void kickOnlinePlayers(MenuEntry *entry);
void disMenu(MenuEntry *entry);
void rgbled(MenuEntry *entry);
void xray(MenuEntry *entry);
void shootWall(MenuEntry *entry);
void freezeBot(MenuEntry *entry);
void freezeBotToggle(MenuEntry *entry);
void dc(MenuEntry *entry);
void gh(MenuEntry *entry);
void empty(MenuEntry *entry);
void showGameText(MenuEntry *entry);
void NameCount(MenuEntry* entry);
void fps120(MenuEntry *entry);
void fps999(MenuEntry *entry);
void fps0(MenuEntry *entry);
void fpsM10(MenuEntry *entry);
void fpsSleepy(MenuEntry *entry);
void emptyOSD(MenuEntry *entry);
void fps60(MenuEntry *entry);
void toggleTheme(MenuEntry *entry);
void customKillCount(MenuEntry *entry);
void customKillCount2(MenuEntry *entry);
void customKillCountOffline(MenuEntry *entry);
void animCount(MenuEntry *entry);
void FOVCount(MenuEntry* entry);
void MenuCount(MenuEntry* entry);
void lockRed(MenuEntry* entry);
void web(MenuEntry* entry);
void CreditCount(MenuEntry* entry);
void onlineGhost(MenuEntry* entry);
void CreditChange(MenuEntry* entry);
void autoShoot(MenuEntry* entry);
void disSpammShoot(MenuEntry* entry);
void delWeapon(MenuEntry* entry);
void noRecoil(MenuEntry* entry);
void speedHack(MenuEntry* entry);
void ModAnima1(MenuEntry* entry);
void ModAnima2(MenuEntry* entry);
void ModMenu(MenuEntry* entry);
void memzVisual(MenuEntry* entry);
void xraytoggle(MenuEntry* entry);
void Rapid2(MenuEntry* entry);
void speedModifier(MenuEntry* entry);
void autoShootCount(MenuEntry* entry);
void recoilCounter(MenuEntry* entry);
void blurCount(MenuEntry* entry);
//--- 2.2
void realifeSensi(MenuEntry* entry);
void onlyRender1room(MenuEntry* entry);
void smoothWalk(MenuEntry* entry);
void smoothRun(MenuEntry* entry);
void xray2(MenuEntry* entry);
void buncyRunCama(MenuEntry* entry);
void wierdCama(MenuEntry* entry);
void upsideDownCama(MenuEntry* entry);
//--- 2.3
void nameChanger2(MenuEntry* entry);
void CoordMod(MenuEntry* entry);
void NoClipSma(MenuEntry* entry);
void NoClipBig(MenuEntry* entry);
void BotNoDyx(MenuEntry* entry);
void BotKill(MenuEntry* entry);
void BotReset(MenuEntry* entry);
void BotNoClip(MenuEntry* entry);
void BotSpeed(MenuEntry* entry);
void NoWeaponSound(MenuEntry* entry);
}
#endif
